public static int fibonacciIntrerative(int n) { 
  if (n <= 1) return n;

  int prev  = 0, curr = 1; 
for (int i = 2; i <= n; i++) {
    int temp = curr; 
  curr += prev; 
  prev = temp;
}
return curr;
}

public static int fibonacciRecursive(int n) {
    if (n <= 1) return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

public static String decimalToBinaryIterative(int n) {
    if (n == 0) return "0";

    StringBuilder binary = new StringBuilder();
    while (n > 0) {
        binary.insert(0, n % 2);
        n /= 2;
    }
    return binary.toString();
}
public static String decimalToBinaryRecursive(int n) {
    if (n == 0) return "0";
    return decimalToBinaryRecursiveHelper(n);
}

private static String decimalToBinaryRecursiveHelper(int n) {
    if (n == 0) return "";
    return decimalToBinaryRecursiveHelper(n / 2) + (n % 2);
}
import java.util.Scanner;

public class NumberConverter {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter an integer for Fibonacci and binary conversion: ");
        int num = sc.nextInt();

        System.out.println("Fibonacci (Iterative): " + fibonacciIterative(num));
        System.out.println("Fibonacci (Recursive): " + fibonacciRecursive(num));

        System.out.println("Binary (Iterative): " + decimalToBinaryIterative(num));
        System.out.println("Binary (Recursive): " + decimalToBinaryRecursive(num));
    }
}

